#!/usr/bin/env zsh
#
# git-fetch-status-pull
#
# alias gfsp='git-fetch-status-pull'
#
# This is mostly used to keep the local clone in sync with the origin, outside
# of just the git fetch; git pull mechanism.
#
# git-tag (https://git-scm.com/docs/git-tag) is especially problematic since
# your local TAGs can diverge quickly when CICD pipelines are doing rolling
# tagging: v1.2.3 -> v1.2 -> v1, then v1.2.4 -> v1.2 -> v1
# git fetch and git pull do not care about TAGs, and it is easy for people to
# overlook, often comparing TAGs locally, not realizing that remote TAGs may
# have shifted commit ids.  This process looks for drift in TAGs.
#
# This also watches for [deleted] branches during the git fetch, and if we have
# that branch locally, then perform a `-d` safe branch deletion.  This is quite
# annoying when the popular "squash" is used when merging MR/PRs, since the
# process checks to see if your commit ids are present in the default branch
# prior to deletion.  Feel free to crank that thing to `-D` and brute force those
# branches into nothingness!
#
# As they say: YMMV

FETCH_OUTPUT=$(git fetch 2>&1)
echo ${FETCH_OUTPUT}
git status
git pull

LOCAL_TAGS=$(git show-ref --tags)
REMOTE_TAGS=$(git ls-remote --tags origin | sed 's/\t/ /g')
BAD_TAGS=$(diff -c <(echo "${LOCAL_TAGS}") <(echo "${REMOTE_TAGS}") | grep 'refs' | grep -v '^ ' | grep -v '\^{}$' | cut -d' ' -f3 | sort -u | wc -l | awk '{print $1}')
if [[ "${BAD_TAGS}" != "0" ]]; then
  DO_IT=$(echo "Yes\nNo" | fzf --prompt "Reset TAGs to origin? ")
  if [[ "${DO_IT}" == "Yes" ]]; then
    git tag -d $(git tag)
    git fetch --tags
    LATEST_TAG=$(git tag --list | sort --reverse --version-sort | head -n 1)
    echo "Latest TAG: ${LATEST_TAG}"
  fi
fi

DELETED_BRANCHES=($(echo ${FETCH_OUTPUT} | grep '\[deleted\]' | cut -d'/' -f 2-))

for DB in ${DELETED_BRANCHES}; do
  HAVE_BRANCH=$(git branch --list | grep "${DB}$" | wc -l | awk '{ print $1 }')
  if [[ "${HAVE_BRANCH}" == "1" ]]; then
    DO_IT=$(echo "Yes\nNo" | fzf --prompt "DELETE 'local' branch ${DB} ?")
    if [[ "${DO_IT}" == "Yes" ]]; then
      git branch -d ${DB}
    fi
  fi
done

# From https://github.com/Maahsome/gitlab-go
# - [deleted]         (none)     -> origin/GT-3/add-delete-calls-mock
# - [deleted]         (none)     -> origin/GT-4/add-delete-calls

