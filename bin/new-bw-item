#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] -f <folder name> -n <item name> -u <user name> -p <password> -m <note>

Create a new item in Bitwarden

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-f, --folder    Specify the folder name to store the item into
-n, --name      Name of the vault item
-u, --user      Username to store
-p, --pass      Password to store
-m, --note      Note/Memo to add to the item
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
  if [[ "${SCRIPT_STEP}" == "find_folder" ]]; then
    echo "Unable to find the folder"
  fi
  if [[ "${SCRIPT_STEP}" == "item_exists" ]]; then
    echo "Failed looking up item."
  fi
  if [[ "${SCRIPT_STEP}" == "create_item" ]]; then
    echo "Failed to create item."
  fi
  if [[ "${SCRIPT_STEP}" == "complete" ]]; then
    echo "Item Created."
  fi
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -f | --folder) 
      FOLDER_NAME="${2-}"
      shift
      ;;
    -n | --name)
      ITEM_NAME="${2-}"
      shift
      ;;
    -u | --user)
      ITEM_USER="${2-}"
      shift
      ;;
    -p | --pass)
      ITEM_PASS="${2-}"
      shift
      ;;
    -m | --note)
      ITEM_NOTE="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ -z "${FOLDER_NAME-}" ]] && die "Missing required parameter: -f|--folder"
  [[ -z "${ITEM_NAME-}" ]] && die "Missing required parameter: -n|--name"
  [[ -z "${ITEM_USER-}" ]] && die "Missing required parameter: -u|--user"
  [[ -z "${ITEM_PASS-}" ]] && die "Missing required parameter: -p|--pass"
  [[ -z "${ITEM_NOTE-}" ]] && die "Missing required parameter: -m|--note"
  # [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

parse_params "$@"
setup_colors
SCRIPT_STEP="start"
BW_STATUS=$(bw status | jq -r '.status')
if [[ "${BW_STATUS}" == "unlocked" ]]; then
  SCRIPT_STEP="find_folder"
  OUTPUT=$(bw get folder "${FOLDER_NAME}" --response)
  # the above has a NONZERO exit code, and will fall to trap, past here is good to go
  # turns out this is a BAD, BAD thing, see below.
  FOLDER_ID=$(echo ${OUTPUT} | jq -r '.data.id')
  SCRIPT_STEP="item_exists"
  OUTPUT=$(bw get item ${ITEM_NAME} --response) # <- this will ERR when the item doesn't exist, and we cannot check it
  BW_SUCCESS=$(echo ${OUTPUT} | jq -r '.status')
  if [[ "${BW_SUCCESS}" == "true" ]]; then
    echo "found"
    ITEM_ID=$(echo ${OUTPUT} | jq -r '.data.id')
    die "An item already exists for ${ITEM_NAME} at ${ITEM_ID}"
  fi
  SCRIPT_STEP="create_item"
  bw get template item | jq ".name = \"${ITEM_NAME}\" | .login.username = \"${ITEM_USER}\" | .login.password = \"${ITEM_PASS}\" | .notes = \"${ITEM_NOTE}\" | .folderId = \"${FOLDER_ID}\"" 
  # ITEM_ID=$(bw get template item | jq ".name = \"${ITEM_NAME}\" | .login.username = \"${ITEM_USER}\" | .login.password = \"${ITEM_PASS}\" | .notes = \"${ITEM_NOTE}\" | .folderId = \"${FOLDER_ID}\"" | bw encode | bw create item | jq -r '.id'); echo ${ITEM_ID}
else
  echo "The Bitwarden vault is locked, please run 'bw unlock' and export the BW_SESSION variable."
fi
SCRIPT_STEP="complete"
